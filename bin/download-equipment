#!/usr/bin/php
<?php

# This script downloads each of the equiment datasets for equipment.data.ac.uk
# And processes them into common formats.

# This takes the list of files to download from a configuration file, which is
# generated from the data at hub.data.ac.uk

# First of all we download each data document and convert it to RDF and cache that.
# If there's a problem, we don't over-ride the previous cache.

# Then we process the cache files to produce a searchable website, and tabular data.

# calculate base path
$path = explode("/", __FILE__);
array_pop( $path ); # lose filename
array_pop( $path ); # lose bin
$base_dir = join( "/", $path );

require_once( "$base_dir/lib/arc2/ARC2.php" );
require_once( "$base_dir/lib/Graphite/Graphite.php" );

# one day this may all be in a config file...
$org_cache_dir = "$base_dir/htdocs/data/org";
$item_cache_dir = "$base_dir/var/item";
$tmp_dir = "/tmp";

$bin_rapper = "rapper"; # assume it's in the path
$bin_ntcat = "$base_dir/lib/ntcat/bin/ntcat";

$config = read_config( "$base_dir/etc/test-list.tsv" );

print "STAGE 1\n";
foreach( $config as &$config_item )
{
	$config_item["errors"] = array();
	$config_item["items"] = 0;
	$config_item["skipped_items"] = 0;
	$graph = null;
	if( $config_item["dataset_type"] == "rdf" )
	{
		$graph = rdf_to_graph( $config_item );
	}
	elseif( $config_item["dataset_type"] == "uniquip/csv" )
	{
		$graph = uniquip_csv_to_graph( $config_item ); 
	}
	elseif( $config_item["dataset_type"] == "kitcat" )
	{
		$graph = kitcat_to_graph( $config_item );
	}
	elseif( $config_item["dataset_type"] == "pure" )
	{
		$graph = pure_to_graph( $config_item );
	}
	else
	{
		$err = "Unknown type: ".$config_item["dataset_type"];
		$config_item["errors"][] = $err;
		print "$err\n";
		continue;
	}

	# filename has ukprn- as a prefix as in the future there may be data from organisations
	# without a ukprn. Who can say for sure!
	$cache_file_ttl = "$org_cache_dir/ukprn-".$config_item["org_ukprn"].".ttl";
	$cache_file_nt = "$org_cache_dir/ukprn-".$config_item["org_ukprn"].".nt";
		
	if( $graph != null && count( $graph->toArcTriples() ) > 0 ) 
	{
		# cache graph if it's set and has some triples

		$fh = fopen($cache_file_ttl, 'w') or die("can't open cache_file: $cache_file_ttl" );
		fwrite($fh, $graph->serialize( "Turtle" ) );
		fclose($fh);
		$fh = fopen($cache_file_nt, 'w') or die("can't open cache_file: $cache_file_nt" );
		fwrite($fh, $graph->serialize( "NTriples" ) );
		fclose($fh);
		$config_item["dataset_timestamp"] = time();
	}
	else
	{
		if( file_exists( $cache_file_ttl ) )
		{
			$err = "Failed to get new data. Using cached version.";
			$config_item["dataset_timestamp"] = filemtime( $cache_file_ttl );
		}
		else
		{
			$err = "Failed to get new data. Also no cache available.";
		}
		$config_item["errors"][] = $err;
		print "$err\n";
	}
}	

# At this stage, we could delete items from the cache not in the profile
# documents.
print "STAGE 2\n";

$search_rows = array();
$all_uniquip_rows = array();
foreach( $config as &$config_item )
{
	$file = "$org_cache_dir/ukprn-".$config_item["org_ukprn"].".ttl";

	$graph = new Graphite();
	$graph->ns( "org", "http://www.w3.org/ns/org#" );	
	$graph->ns( "gr", "http://purl.org/goodrelations/v1#" );
	$graph->ns( "oldcerif", "http://spi-fm.uca.es/neologism/cerif#" );

	$n = $graph->load( "file://$file" );
	$orguri = "http://id.learning-provider.data.ac.uk/ukprn/".$config_item["org_ukprn"];
	$graph->load( $orguri );
	$org = $graph->resource( $orguri );

	$postcode= $org->get( "http://data.ordnancesurvey.co.uk/ontology/postcode/postcode" );
	$config_item["org_homepage"] = $org->getLiteral( "foaf:homepage" );
	$config_item["org_easting"] = "";
	$config_item["org_northing"] = "";	
	$config_item["org_lat"] = "";
	$config_item["org_long"] = "";	
	if( $postcode->has( "http://data.ordnancesurvey.co.uk/ontology/spatialrelations/easting" ) )
	{
		$config_item["org_easting"] = $postcode->getLiteral( "http://data.ordnancesurvey.co.uk/ontology/spatialrelations/easting" );
		$config_item["org_northing"] = $postcode->getLiteral( "http://data.ordnancesurvey.co.uk/ontology/spatialrelations/northing" );
	}
	if( $postcode->has( "geo:lat" ) )
	{
		$config_item["org_lat"] = $postcode->getLiteral( "geo:lat" );
		$config_item["org_long"] = $postcode->getLiteral( "geo:long" );
	}

	print "$file -- $n\n";
	if( $n == 0 ) { continue; }

	$org_uniquip_rows = array();

	$items = array();
	foreach( $graph->allSubjects() as $resource )
	{
		if( $resource->isType( "oo:Facility", "oldcerif:Facility", "oo:Equipment", "oldcerif:Equipment" ))
		{
			$items[]=$resource;
		}
	}

	foreach( $items as $item )
	{
		if( !itemLooksLegit( $item ) ) { $config_item["skipped_items"]++; continue; }
		$config_item["items"]++;
		$uniquip_row = itemToUniquipRow( $item );
		$org_uniquip_rows []= $uniquip_row;
		$all_uniquip_rows []= $uniquip_row;
		$search_rows []= itemToSearchTerms( $item );
		processItemPage( $item );
	}


	if( $config_item["skipped_items"] )
	{		
		$config_item["errors"][] = $config_item["skipped_items"]." item".( $config_item["skipped_items"] == 1 ? "" : "s" )." had no contact listed and were skipped."; 
	}

	$uniquip_file = "$org_cache_dir/ukprn-".$config_item["org_ukprn"].".tsv";
	$fields = uniquipFields();
	$fh = fopen($uniquip_file, 'w') or die("can't open file: $uniquip_file" );
	fwrite( $fh, join( "\t", $fields )."\n" );
	foreach( $org_uniquip_rows as $row )
	{
		$tsv_row = array();
		foreach( $fields as $field )
		{
			$tsv_row []= @preg_replace( "/[\t\n]/"," ",$row[$field] );
		}
		fwrite( $fh, join( "\t", $tsv_row )."\n" );
	}
	fclose($fh);

	$uniquip_file = "$org_cache_dir/ukprn-".$config_item["org_ukprn"].".csv";
	$fields = uniquipFields();
	$fh = fopen($uniquip_file, 'w') or die("can't open file: $uniquip_file" );
	fputcsv($fh, $fields);
	foreach( $org_uniquip_rows as $row )
	{
		$csv_row = array();
		foreach( $fields as $field )
		{
			$csv_row []= @$row[$field];
		}
		fputcsv($fh, $csv_row);
	}
	fclose($fh);
	
}

$file = $base_dir."/var/search.tsv";
$fh = fopen($file, 'w') or die("can't open file: $file" );
fwrite($fh, join( "", $search_rows ) );
fclose($fh);

$file = $base_dir."/htdocs/data/status.json";
$fh = fopen($file, 'w') or die("can't open file: $file" );
fwrite($fh, json_encode( $config ) );
fclose($fh);

$uniquip_file = $base_dir."/htdocs/data/uniquip.tsv";
$fields = uniquipFields();
$fh = fopen($uniquip_file, 'w') or die("can't open file: $uniquip_file" );
fwrite( $fh, join( "\t", $fields )."\n" );
foreach( $all_uniquip_rows as $row )
{
	$tsv_row = array();
	foreach( $fields as $field )
	{
		$tsv_row []= @preg_replace( "/[\t\n]/"," ",$row[$field] );
	}
	fwrite( $fh, join( "\t", $tsv_row )."\n" );
}
fclose($fh);

$uniquip_file = $base_dir."/htdocs/data/uniquip.csv";
$fields = uniquipFields();
$fh = fopen($uniquip_file, 'w') or die("can't open file: $uniquip_file" );
fputcsv($fh, $fields);
foreach( $all_uniquip_rows as $row )
{
	$csv_row = array();
	foreach( $fields as $field )
	{
		$csv_row []= @$row[$field];
	}
	fputcsv($fh, $csv_row);
}
fclose($fh);

$uniquip_file = $base_dir."/htdocs/data/uniquip.html";
$fields = uniquipFields();
$fh = fopen($uniquip_file, 'w') or die("can't open file: $uniquip_file" );

fwrite( $fh, "<!doctype html>\n<html><style>body { font-family: sans-serif; } table { border-collapse: collapse; } td, th { padding: 4px; border: solid 1px #000 } th { color: #fff ; background-color: #000; }</style>" );
fwrite( $fh, "<table>" );
fwrite( $fh, "<tr><th>".join( "</th><th>", $fields )."</th></tr>\n" );
foreach( $all_uniquip_rows as $row )
{
	$html_row = array();
	foreach( $fields as $field )
	{
		$html_row []= @preg_replace( "/[\t\n]/"," ",$row[$field] );
	}
	fwrite( $fh, "<tr><td>".join( "</td><td>", $html_row )."</td></tr>\n" );
}
fwrite( $fh, "</table></html>" );
fclose($fh);

# Generate the combined RDF lists

exec( "$bin_ntcat $base_dir/htdocs/data/org/*.nt > $base_dir/htdocs/data/equipment.nt" );
exec( "$bin_rapper -e -i ntriples -o turtle $base_dir/htdocs/data/equipment.nt > $base_dir/htdocs/data/equipment.ttl" );

exit;


function read_config( $file )
{
	$rows = file( $file );

	$config = array();	
	foreach( $rows as $row )
	{
		if( preg_match( "/^#/", $row ) ) { continue; } # skip commented lines

		$cells = preg_split( "/\t/", chop( $row ) );	
		if( sizeof( $cells ) != 7 ) { print "Bad Row in config:\n$row\n"; continue; }
		$config []=  array( 
			"org_ukprn" => $cells[0],	
			"dataset_type" => $cells[1],	
			"dataset_url" => $cells[2],	
			"org_name" => $cells[3],	
			"org_url" => $cells[4],	
			"org_logo" => $cells[5],	
			"dataset_corrections" => $cells[6],	
		);
	}
	
	return $config;
}

function rdf_to_graph( &$c )
{
	global $tmp_dir;
	global $bin_rapper;

	$graph = new Graphite();

	print "Loading RDF: ".$c["dataset_url"]."\n";
	print "Downloading via Rapper\n";

	$ext = pathinfo($c["dataset_url"], PATHINFO_EXTENSION);	
	$tmpfile_err = "$tmp_dir/data-eq-".md5( $c["dataset_url"]).".err";
	$tmpfile_nt = "$tmp_dir/data-eq-".md5( $c["dataset_url"]).".nt";

	$url = preg_replace( "/['\\\\]/", "", $c["dataset_url"] );
	exec( "$bin_rapper -g '$url' -q > $tmpfile_nt 2> $tmpfile_err" );

	$errors = file_get_contents( $tmpfile_err );
	unlink( $tmpfile_err );

	if( $errors != "" )
	{
		#unlink( $tmpfile_nt );
		$c["errors"][] = "Parse error: ".$errors;
		return false; 
	}
		
	
	$n = $graph->load( $tmpfile_nt );
	unlink( $tmpfile_nt );

	if( $n==0 ) 
	{ 
		$c["errors"][] = "No triples loaded";
		return false; 
	}

	return $graph;
}


#	<institution>University of Bath</institution>
#	<uid>fc6f165a-c970-4d0b-a890-48d81286dd54</uid>
#	<title>Peak Motus Software</title>
#	<description/>
#	<modified>2012-12-13T11:14:52.288Z</modified>
#	<acquisitionDate>2001-07-01+01:00</acquisitionDate>
#	<owner shortName="HEALTH DPT FOR">Health</owner>
#	<phone>01225 383371</phone>
#	<website/>
#	<email>A.Wallbaum@bath.ac.uk</email>

#					[institution] => University of Bath
#					[uid] => 8eabb306-645e-4741-89d2-679292910dcf
#					[title] => NIR Spectrometer
#					[description] => SimpleXMLElement Object () 
#					[modified] => 2012-12-13T11:15:06.920Z
#					[acquisitionDate] => 2007-07-31+01:00
#					[owner] => Physics
#					[phone] => 01225 383042
#					[website] => SimpleXMLElement Object () 
#					[email] => J.C.Knight@bath.ac.uk

# ignoring: institution, modified, acquisitionDate


function pure_to_graph( &$c )
{
	$content = file_get_contents( $c["dataset_url"] );
	if( !$content )
	{	
		$c["errors"][] = "No content from URL";
		return false;
	}

	# fix to buggy XML
	$lines = preg_split( "/\n/", $content );
	$lines[1]= "<items>";
	array_push( $lines, "</items>" );
	$content = join( "\n", $lines );
	$xml = simplexml_load_string( $content );

	$graph = new Graphite();
	$graph->ns( "org", "http://www.w3.org/ns/org#" );
	foreach( $xml->equipment as $item )
	{
		$uri = "urn:uuid:".(string)$item->uid;
		$graph->addCompressedTriple( $uri, "rdf:type", "oo:Equipment" );
		$graph->addCompressedTriple( $uri, "rdfs:label", (string)$item->title, "literal" );
		$graph->addCompressedTriple( $uri, "oo:formalOrganization", "http://id.learning-provider.data.ac.uk/ukprn/".$c["org_ukprn"] );
		if( $item->description != "" )
		{
			# kitcat always makes HTML fragment descriptions	
			$graph->addCompressedTriple( $uri, "dcterms:description", $item["description"], "http://purl.org/xtypes/Fragment-HTML" );
		}


		if( $item->owner != "" )
		{
			$org_id = "";
			foreach( $item->owner->attributes() as $k=>$v )
			{
				if( $k == "shortName" ) { $org_id = $v; }
			}
			if( !isset( $org_id ) )
			{ 
				$org_id = md5( (string)$item->owner  ); 
			}
			$org_uri = "http://id.equipment.data.ac.uk/ukprn/".$c["org_ukprn"]."/org/".rawurlencode($org_id);
			$graph->addCompressedTriple( $uri, "oo:organizationPart", $org_uri );
			$graph->addCompressedTriple( $org_uri, "rdfs:label", (string)$item->owner, "literal" );
			$graph->addCompressedTriple( $org_uri, "rdf:type", "http://www.w3.org/ns/org#Organization" );
			$graph->addCompressedTriple( "http://id.learning-provider.data.ac.uk/ukprn/".$c["org_ukprn"], "org:hasSubOrganization", $org_uri );
		}
			
		if( $item->phone != "" || $item->email != "" )
		{	
			$graph->addCompressedTriple( $uri, "oo:contact", "$uri#contact1" );
			$graph->addCompressedTriple( $uri, "oo:primaryContact", "$uri#contact1" );
			if( $item->email != "" )
			{
				$graph->addCompressedTriple( "$uri#contact1", "foaf:mbox", "mailto:".$item->email );
			}
			if( $item->phone != "" )
			{
				addPhone( $graph, "$uri#contact1", $item->phone );
			}
		}


		if( $item->website != "" )
		{	
			$graph->addCompressedTriple( $uri, "foaf:page", $item->website );
		}
	}

	return $graph;
}

# adds a foaf:phone number to the URI in the $graph, but tries to do some sensible things.
# 
function addPhone( $graph, $uri, $phone_number )
{
	# remove whitespace
	$phone_number = preg_replace( '/ /', '', $phone_number );

	# remove (0) 
	$phone_number = preg_replace( '/\(0\)/', '', $phone_number );

	# replace leading 0 with +44 (UK code). 
	$phone_number = preg_replace( '/^0/', '+44', $phone_number );

	# if it contains weird characters, make it a literal, otherwise a tel: resource
	if( preg_match( '/[^+\d]/', $phone_number  ) )
	{
		$graph->addCompressedTriple( $uri, "foaf:phone", $phone_number, "literal" );
	}
	else
	{
		$graph->addCompressedTriple( $uri, "foaf:phone", "tel:".$phone_number );
	}
}
	

# Input terms from kitcat JSON

#		"id": "http://equipment.lboro.ac.uk/id/item/2121",
#		"name": "X-ray Photoelectron Spectrometer",
#		"manufacturer": "Thermo Scientific",
#		"model": "K-Alpha",
#		"description": "<p>Fully...",
#		"contact1": "s.s.doak@lboro.ac.uk",
#		"contact2": "",
#		"image": "http://equipment.lboro.ac.uk/item/x-ray-photoelectron-spectrometer/2121/image/image_41780.jpg",
#		"link": "http://equipment.lboro.ac.uk/id/item/2121/x-ray-photoelectron-spectrometer.html"

function kitcat_to_graph( &$c )
{
	$content = file_get_contents( $c["dataset_url"] );
	$items = json_decode( $content, true );

	$graph = new Graphite();
	foreach( $items as $item )
	{
		$uri = $item["id"];

		# assumption-- everything from kitcat is equipment		
		$graph->addCompressedTriple( $uri, "rdf:type", "oo:Equipment" );

		$graph->addCompressedTriple( $uri, "rdfs:label", $item["name"], "literal" );
		$graph->addCompressedTriple( $uri, "oo:formalOrganization", "http://id.learning-provider.data.ac.uk/ukprn/".$c["org_ukprn"] );

		if( $item["model"] != ""  || $item["manufacturer"] != "" )
		{
			$graph->addCompressedTriple( $uri, "gr:hasMakeAndModel", "$uri#model" );
			$graph->addCompressedTriple( "$uri#model", "rdf:type", "gr:ProductOrServiceModel" );
			if( $item["model"] != "" )
			{
				$graph->addCompressedTriple( "$uri#model", "rdfs:label", $item["model"], "literal" ); 
			}
			if( $item["manufacturer"] != "" )
			{
				$graph->addCompressedTriple( "$uri#model", "gr:hasManufacturer", "$uri#manu" );
				$graph->addCompressedTriple( "$uri#manu", "rdf:type", "gr:BusinessEntity" );
				$graph->addCompressedTriple( "$uri#manu", "rdfs:label", $item["manufacturer"], "literal" ); 
			}
		}

		if( $item["description"] != "" )
		{
			# kitcat always makes HTML fragment descriptions	
			$graph->addCompressedTriple( $uri, "dcterms:description", $item["description"], "http://purl.org/xtypes/Fragment-HTML" );
		}
		
		if( $item["contact1"] != "" )
		{	
			$graph->addCompressedTriple( $uri, "oo:contact", "$uri#contact1" );
			$graph->addCompressedTriple( $uri, "oo:primaryContact", "$uri#contact1" );
			$graph->addCompressedTriple( "$uri#contact1", "foaf:mbox", "mailto:".$item["contact1"] );
		}

		if( $item["contact2"] != "" )
		{	
			$graph->addCompressedTriple( $uri, "oo:contact", "$uri#contact2" );
			$graph->addCompressedTriple( "$uri#contact2", "foaf:mbox", "mailto:".$item["contact2"] );
		}

		if( $item["link"] != "" )
		{	
			$graph->addCompressedTriple( $uri, "foaf:page", $item["link"] );
		}

		if( $item["image"] != "" )
		{	
			$graph->addCompressedTriple( $uri, "foaf:depiction", $item["image"] );
		}
	}
	
	return $graph;
}

function uniquip_csv_to_graph( &$c )
{
	$items = csv_to_array( $c );
	if( !$items ) { return false; }
	if( sizeof( $items ) == 0 )
	{
		$c["errors"][] = "No rows in CSV";
		return false;
	}

	return uniquip_to_graph( $c, $items );
}

function uniquip_to_graph( &$c, $items )
{
	$graph = new Graphite();
	foreach( $items as $item )
	{
		$id = md5( join( "|", $item ) );
		$uri = "http://id.equipment.data.ac.uk/ukprn/".$c["org_ukprn"]."/item/".rawurlencode($id);

		$graph->addCompressedTriple( $uri, "rdf:type", "oo:Equipment" );

		# any &amp; or &gt; will be decoded in the label
		$graph->addCompressedTriple( $uri, "rdfs:label", htmlspecialchars_decode($item["Name"]), "literal" );
		$graph->addCompressedTriple( $uri, "oo:formalOrganization", "http://id.learning-provider.data.ac.uk/ukprn/".$c["org_ukprn"] );

		# description assumed to contain HTML
		if( @$item["Description"] != "" )
		{
			$graph->addCompressedTriple( $uri, "dcterms:description", $item["Description"], "http://purl.org/xtypes/Fragment-HTML" );
		}


		$contact1 = ( @$item["Contact Name"] != "" )
		         || ( @$item["Contact Telephone"] != "" )
		         || ( @$item["Contact Email"] != "" )
		         || ( @$item["Contact URL"] != "" );

		if( $contact1 )
		{	
			$graph->addCompressedTriple( $uri, "oo:contact", "$uri#contact1" );
			$graph->addCompressedTriple( $uri, "oo:primaryContact", "$uri#contact1" );
			if( @$item["Contact Name"] != "" )
			{
				$graph->addCompressedTriple( "$uri#contact1", "foaf:name", $item["Contact Name"], "literal" );
			}
			if( @$item["Contact URL"] != "" )
			{
				$graph->addCompressedTriple( "$uri#contact1", "foaf:page", $item["Contact URL"] );
			}
			if( @$item["Contact Telephone"] != "" )
			{
				addPhone( $graph, "$uri#contact1", $item["Contact Telephone"] );
			}
			if( @$item["Contact Email"] != "" )
			{
				$graph->addCompressedTriple( "$uri#contact1", "foaf:mbox", "mailto:".$item["Contact Email"] );
			}
		}



		$contact2 = ( @$item["Secondary Contact Name"] != "" )
		         || ( @$item["Secondary Contact Telephone"] != "" )
		         || ( @$item["Secondary Contact Email"] != "" )
		         || ( @$item["Secondary Contact URL"] != "" );

		if( $contact2 )
		{	
			$graph->addCompressedTriple( $uri, "oo:contact", "$uri#contact2" );
			if( @$item["Secondary Contact Name"] != "" )
			{
				$graph->addCompressedTriple( "$uri#contact2", "foaf:name", $item["Secondary Contact Name"], "literal" );
			}
			if( @$item["Secondary Contact URL"] != "" )
			{
				$graph->addCompressedTriple( "$uri#contact2", "foaf:page", $item["Secondary Contact URL"] );
			}
			if( @$item["Secondary Contact Telephone"] != "" )
			{
				addPhone( $graph, "$uri#contact2", $item["Secondary Contact Telephone"] );
			}
			if( @$item["Secondary Contact Email"] != "" )
			{
				$graph->addCompressedTriple( "$uri#contact2", "foaf:mbox", "mailto:".$item["Secondary Contact Email"] );
			}
		}



		if( @$item["Web Address"] != "" )
		{	
			$graph->addCompressedTriple( $uri, "foaf:page", $item["Web Address"] );
		}

		if( @$item["Photo"] != "" )
		{	
			$graph->addCompressedTriple( $uri, "foaf:depiction", $item["Photo"] );
		}

		if( @trim($item["Department"]) != "" )
		{
			$org_id = md5( $item["Department"] );
			$org_uri = "http://id.equipment.data.ac.uk/ukprn/".$c["org_ukprn"]."/org/".rawurlencode($org_id);
			$graph->addCompressedTriple( $uri, "oo:organizationPart", $org_uri );
			$graph->addCompressedTriple( $org_uri, "rdfs:label", $item["Department"], "literal" );
			$graph->addCompressedTriple( $org_uri, "rdf:type", "http://www.w3.org/ns/org#Organization" );
			$graph->addCompressedTriple( "http://id.learning-provider.data.ac.uk/ukprn/".$c["org_ukprn"], "org:hasSubOrganization", $org_uri );
		}

		if( @trim($item["Building"]) != "" )
		{
			$org_id = md5( $item["Building"] );
			$org_uri = "http://id.equipment.data.ac.uk/ukprn/".$c["org_ukprn"]."/org/".rawurlencode($org_id);
			$graph->addCompressedTriple( $uri, "oo:organizationPart", $org_uri );
			$graph->addCompressedTriple( $org_uri, "rdfs:label", $item["Building"], "literal" );
			$graph->addCompressedTriple( $org_uri, "rdf:type", "http://vocab.deri.ie/rooms#" );
			# we are *not* automatically assuming the building belongs to the uni, just in case
		}

		# fields not yet handled:
		#"Type",
		#"Related Facility ID",
		#"Technique",
		#"Location",
		#"ID",
		#"Site Location",
		#"Service Level",
	}

	return $graph;
}

function uniquipFields()
{
	return array( 
"Type",
"Name",
"Description",
"Related Facility ID",
"Technique",
"Location",
"Contact Name",
"Contact Telephone",
"Contact URL",
"Contact Email",
"Secondary Contact Name",
"Secondary Contact Telephone",
"Secondary Contact URL",
"Secondary Contact Email",
"ID",
"Photo",
"Department",
"Site Location",
"Building",
"Service Level",
"Web Address",

"Institution Name",
"Institution URL",
"Institution Logo URL",
"Datestamp",
"Approximate Coordinates",
"Corrections",
);
}

function itemToUniquipRow($item)
{
	global $config_item;

	$uniquip = array();

	$contacts = array();
	$done = array();
	foreach( $item->all( "oo:primaryContact", "oo:contact" ) as $contact )
	{
		if( @$done[$contact->toString()] ) { continue; }
		$done[$contact->toString()] = true;
		$c = array();
		if( $contact->hasLabel() ) { $c["Name"] = (string)$contact->label(); }
		if( $contact->has( "foaf:mbox" ) ) { 
			$c["Email"] = preg_replace( "/mailto:/","", $contact->getString( "foaf:mbox" ) );
		}
		if( $contact->has( "foaf:phone" ) ) { 
			$c["Telephone"] = preg_replace( "/tel:/","", $contact->getString( "foaf:phone" ) );
		}
		$contacts []= $c;
	}




#"Type",
	if( $item->isType( "oo:Equipment", "oldcerif:Equipment" ) )
	{
		$uniquip["Type"] = "equipment";
	}
	if( $item->isType( "oo:Facility", "oldcerif:Facility" ) )
	{
		$uniquip["Type"] = "facility";
	}
#"Name",
	if( $item->hasLabel() )
	{
		$uniquip["Name"] = (string)$item->label();
	}
#"Description",
	if( $item->has( "dcterms:description" ) )
	{
		$uniquip["Description"] = $item->getString( "dcterms:description" );
	}
#"Related Facility ID",
#"Technique",
#"Location",
#"Contact Name",
	@$uniquip["Contact Name"] = $contacts[0]["Name"];
#"Contact Telephone",
	@$uniquip["Contact Telephone"] = $contacts[0]["Telephone"];
#"Contact URL",
#"Contact Email",
	@$uniquip["Contact Email"] = $contacts[0]["Email"];
#"Secondary Contact Name",
	@$uniquip["Secondary Contact Name"] = $contacts[1]["Name"];
#"Secondary Contact Telephone",
	@$uniquip["Secondary Contact Telephone"] = $contacts[1]["Telephone"];
#"Secondary Contact URL",
#"Secondary Contact Email",
	@$uniquip["Secondary Contact Email"] = $contacts[1]["Email"];
#"ID",
#"Photo",
	if( $item->has( "foaf:depiction" ) )
	{
		$uniquip["Photo"] = $item->getString( "foaf:depiction" );
	}
#"Department",
#"Site Location",
#"Building",
#"Service Level",
#"Web Address",
	if( $item->has( "foaf:page" ) )
	{
		$uniquip["Web Address"] = $item->getString( "foaf:page" );
	}
#"Institution Name",
	if( $config_item["org_name"] )
	{
		$uniquip["Institution Name"] = $config_item["org_name"];
	}
#"Institution URL",
	if( $config_item["org_homepage"] )
	{
		$uniquip["Institution URL"] = $config_item["org_homepage"];
	}
#"Institution Logo URL",
	if( $config_item["org_logo"] )
	{
		$uniquip["Institution Logo URL"] = $config_item["org_logo"];
	}
#"Datestamp",
	if( $config_item["dataset_timestamp"] )
	{
		$uniquip["Datestamp"] = date( "c", $config_item["dataset_timestamp"] );
	}
#"Approximate Coordinates",
	if( $config_item["org_lat"] )
	{
		$uniquip["Approximate Coordinates"] = $config_item["org_lat"]." ".$config_item["org_long"];
	}
#"Corrections"
	if( $config_item["dataset_corrections"] )
	{
		$uniquip["Corrections"] = $config_item["dataset_corrections"];
	}
	return $uniquip;
}

function itemLooksLegit( $item )
{
	if( !$item->has( "oo:primaryContact", "oo:contact" ) )
	{
		return false;
	}
	return true;
}

function itemCacheID( $item )
{
	return md5( $item->uri );
}

function itemToSearchTerms( $item )
{
	global $config_item;
	# create row for grepping searches
	$search_terms = $item->label()." ".$item->getString( "dcterms:description" );
	$search_terms = preg_replace( "/\s+/"," ", $search_terms );
	$search_terms = strtolower( $search_terms );
	$search_terms = preg_replace( "/<[^>]+/", "", $search_terms );
	$search_terms = preg_replace( "/[^ a-z0-9]/", "", $search_terms );

	$cells = array();
	$cells []= $search_terms;	
	$cells []= itemCacheID( $item );
	$cells []= $item->label();	
	$cells []= $config_item["org_name"];
	$cells []= $config_item["org_easting"];
	$cells []= $config_item["org_northing"];
	return join( "\t", $cells )."\n";
}

function processItemPage( $item )
{
	global $item_cache_dir;
	global $config_item;

	# create cache for displaying results
	$html = array();
	$html []= "<div class='search-result'>";
	$html []= "<h2>".htmlspecialchars( $item->label() )."</h2>";
	$html []= "<a class='uni-logo' title='".$config_item["org_name"]."' href='".$config_item["org_homepage"]."'><img width='200' src='".$config_item["org_logo"]."' /></a>";
	if( $item->has( "foaf:page" ) )
	{
		$html []= "<p><a href='".$item->get("foaf:page")."'>More information</a>.</p>";
	}
	if( $item->has( "foaf:depiction" ) )
	{
		$html []= "<img width='200' src='".$item->get( "foaf:depiction" )."' />";
	}
	if( $item->has( "dcterms:description" ) )
	{
		$html []= "<div class='description'>".$item->get("dcterms:description")."</div>";
	}
	if( $item->has( "org:organization" ) && $item->get( "org:organization" )->hasLabel() )
	{
		$html []= "<div>Organization: ".$item->get("org:organization")->label()."</div>";
	}
	if( $item->has( "gr:hasMakeAndModel" ) )
	{
		$make_and_model = $item->get( "gr:hasMakeAndModel" );
		if( $make_and_model->hasLabel() )
		{
			$html []= "<p>Model: ".$make_and_model->label()."</p>";
		}
		if( $make_and_model->has( "gr:hasManufacturer" ) )
		{
			$manufacturer = $make_and_model->get( "gr:hasManufacturer" );
			if( $manufacturer->hasLabel() )
			{
				$html []= "<p>Manufacturer: ".$manufacturer->label()."</p>";
			}
		}
	}
	$done=array();
	foreach( $item->all( "oo:primaryContact", "oo:contact" ) as $contact )
	{
		if( @$done[$contact->toString()] ) { continue; }
		$done[$contact->toString()] = true;
		$html []= "<p>Contact ";
		if( $contact->hasLabel() ) { $html []= $contact->label(); }
		if( $contact->has( "foaf:mbox" ) ) {
			$html []= " ".$contact->get( "foaf:mbox" )->prettyLink();
		}
		if( $contact->has( "foaf:phone" ) ) {
			$html []= " ".$contact->get( "foaf:phone" )->prettyLink();
		}
		$html []= "</p>";
	}
	if( $config_item["dataset_corrections"] )
	{
		# use the graphite URL link renderer
		$g = new Graphite();
		$html []=  "<div class='corrections'>Issues with this record should be reported to ".$g->resource( $config_item["dataset_corrections"] )->prettyLink()."</div>";
	}
	$html []= "</div>";

	$file = $item_cache_dir."/".itemCacheID( $item );
	$fh = fopen($file, 'w') or die("can't open file: $file" );
	fwrite($fh, join( "", $html ) );
	fclose( $fh );
}	

# this function adapted from http://www.php.net/manual/en/function.str-getcsv.php#99323
# under license # http://creativecommons.org/licenses/by/3.0/legalcode
# Credit: Jay Williams
/**
 * @link http://gist.github.com/385876
 */
function csv_to_array( &$c, $delimiter=',')
{
	$handle = fopen($c["dataset_url"], 'r');
	if( $handle === false )
	{	
		$c["errors"][] = "No content from URL";
		return false;
	}

	$header = false;
	$data = array();
	while (($row = fgetcsv($handle, 1000, $delimiter)) !== FALSE)
	{
		# clean up whitespace
		foreach( $row as $key=>$value )
		{
			$row[$key] = trim( $value );
		}

		if(!$header)
		{
			$header = $row;
		}
		else
		{
			$data[] = array_combine($header, $row);
		}
	}
	fclose($handle);

	if( !$header )
	{
		$c["errors"][] = "Failed to parse CSV";
		return false;
	}

	return $data;
}
