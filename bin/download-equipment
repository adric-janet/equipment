#!/usr/bin/php
<?php
echo ini_get('max_execution_time'), ' | ', ini_get('max_input_time');

# This script downloads each of the equiment datasets for equipment.data.ac.uk
# And processes them into common formats.

# This takes the list of files to download from a configuration file, which is
# generated from the data at hub.data.ac.uk

# First of all we download each data document and convert it to RDF and cache that.
# If there's a problem, we don't over-ride the previous cache.

# Then we process the cache files to produce a searchable website, and tabular data.


require_once( "lib/arc2/ARC2.php" );
require_once( "lib/Graphite/Graphite.php" );

$base_dir = "/home/dataacuk/data.ac.uk/equipment";

$org_cache_dir = "$base_dir/htdocs/data/org";
$item_cache_dir = "$base_dir/var/item";

$config = read_config( "$base_dir/etc/test-list.tsv" );

print "STAGE 1\n";
foreach( $config as &$config_item )
{
	print_r( $config_item );
	$config_item["errors"] = array();
	$config_item["items"] = 0;
	$graph = null;
	if( $config_item["type"] == "rdf" )
	{
		$graph = rdf_to_graph( $config_item ); # TODO
	}
	elseif( $config_item["type"] == "uniquip_csv" )
	{
		$graph = uniquip_csv_to_graph( $config_item ); # TODO
	}
	elseif( $config_item["type"] == "kitcat" )
	{
		$graph = kitcat_to_graph( $config_item );
	}
	else
	{
		$err = "Unknown type: ".$config_item["type"];
		$config_item["errors"][] = $err;
		print "$err\n";
		continue;
	}

	# filename has ukprn- as a prefix as in the future there may be data from organisations
	# without a ukprn. Who can say for sure!
	$cache_file = "$org_cache_dir/ukprn-".$config_item["ukprn"].".ttl";
		
	if( $graph != null && count( $graph->toArcTriples() ) > 0 ) 
	{
		# cache graph if it's set and has some triples

		$fh = fopen($cache_file, 'w') or die("can't open cache_file: $cache_file" );
		fwrite($fh, $graph->serialize( "Turtle" ) );
		fclose($fh);
	}
	else
	{
		if( file_exists( $cache_file ) )
		{
			$err = "Failed to get new data. Using cached version.";
		}
		else
		{
			$err = "Failed to get new data. Also no cache available.";
		}
		$config_item["errors"][] = $err;
		print "$err\n";
	}
}	

# At this stage, we could delete items from the cache not in the profile
# documents.
print "STAGE 2\n";

$search_rows = array();
foreach( $config as &$config_item )
{
	$file = "$org_cache_dir/ukprn-".$config_item["ukprn"].".ttl";
	print_r( $config_item );

	$graph = new Graphite();
	$n = $graph->load( "file://$file" );
	$orguri = "http://id.learning-provider.data.ac.uk/ukprn/".$config_item["ukprn"];
	$graph->load( $orguri );
	$org = $graph->resource( $orguri );
	$postcode = $org->get( "http://data.ordnancesurvey.co.uk/ontology/postcode/postcode" );
	$homepage = $org->get( "foaf:homepage" );
	$easting = "";
	$northing = "";	
	if( $postcode->has( "http://data.ordnancesurvey.co.uk/ontology/spatialrelations/easting" ) )
	{
		$easting = $postcode->get( "http://data.ordnancesurvey.co.uk/ontology/spatialrelations/easting" );
		$northing = $postcode->get( "http://data.ordnancesurvey.co.uk/ontology/spatialrelations/northing" );
	}


	print "$file -- $n\n";
	if( $n == 0 ) { continue; }

	foreach( $graph->allOfType( "oo:Equipment" ) as $item )
	{
		$config_item["items"]++;
		$cache_id = md5( $item->uri );

		# create row for grepping searches
		$search_terms = $item->label()." ".$item->getString( "dcterms:description" );
		$search_terms = preg_replace( "/\s+/"," ", $search_terms );
		$search_terms = strtolower( $search_terms );
		$search_terms = preg_replace( "/<[^>]+/", "", $search_terms );
		$search_terms = preg_replace( "/[^ a-z0-9]/", "", $search_terms );

		$cells = array();
		$cells []= $search_terms;	
		$cells []= $cache_id;	
		$cells []= $item->label();	
		$cells []= $config_item["name"];
		$cells []= $easting;
		$cells []= $northing;

		$search_rows []= join( "\t", $cells )."\n";
  
#→ rdf:type → oo:Equipment
#→ gr:hasMakeAndModel → http://equipment.data.ac.uk/item/ukprn-10004113/0884b83817ad7ac91bd19c7780f5d307#model
#"^^http://purl.org/xtypes/Fragment-HTML
#→ oo:contact → http://equipment.data.ac.uk/item/ukprn-10004113/0884b83817ad7ac91bd19c7780f5d307#contact1
#→ oo:primaryContact → http://equipment.data.ac.uk/item/ukprn-10004113/0884b83817ad7ac91bd19c7780f5d307#contact1
 

		# create cache for displaying results
		$html = array();
		$html []= "<div class='search-result'>";
		$html []= "<h2>".htmlspecialchars( $item->label() )."</h2>";
		$html []= "<a title='".$config_item["name"]."' href='".$homepage."'><img width='200' src='".$config_item["logo"]."' /></a>";
		if( $item->has( "foaf:page" ) )
		{
			$html []= "<p>More info: ".$item->get("foaf:page")->link()."</p>";
		}
		if( $item->has( "foaf:depiction" ) )
		{
			$html []= "<img width='200' src='".$item->get( "foaf:depiction" )."' />";
		}
		if( $item->has( "dcterms:description" ) )
		{
			$html []= "<div>".$item->get("dcterms:description")."</div>";
		}
		$html []= $item->dump();
		$html []= $item->get( "oo:contact" )->dump();
		$html []= "</div>";
		$file = $item_cache_dir."/".$cache_id;
		$fh = fopen($file, 'w') or die("can't open file: $file" );
		fwrite($fh, join( "", $html ) );
		fclose( $fh );
	}	
}

$file = $base_dir."/var/search.tsv";
$fh = fopen($file, 'w') or die("can't open file: $file" );
fwrite($fh, join( "", $search_rows ) );
fclose($fh);

# TODO: Output Data Documents

$file = $base_dir."/htdocs/data/status.json";
$fh = fopen($file, 'w') or die("can't open file: $file" );
fwrite($fh, json_encode( $config ) );
fclose($fh);


exit;


function read_config( $file )
{
	$rows = file( $file );

	$config = array();	
	foreach( $rows as $row )
	{
		$cells = preg_split( "/\t/", chop( $row ) );	
		$config []=  array( 
			"ukprn" => $cells[0],	
			"type" => $cells[1],	
			"url" => $cells[2],	
			"name" => $cells[3],	
			"logo" => $cells[4],	
		);
	}
	
	return $config;
}

function rdf_to_graph( $c )
{
	$graph = new Graphite();

print "Loading RDF: ".$c["url"]."\n";
	$n = $graph->load( $c["url"] );

	if( $n==0 ) { return null; }

	return $graph;
}

# Input terms from kitcat JSON

#        "id": "http://equipment.lboro.ac.uk/id/item/2121",
#        "name": "X-ray Photoelectron Spectrometer",
#        "manufacturer": "Thermo Scientific",
#        "model": "K-Alpha",
#        "description": "<p>Fully...",
#        "contact1": "s.s.doak@lboro.ac.uk",
#        "contact2": "",
#        "image": "http://equipment.lboro.ac.uk/item/x-ray-photoelectron-spectrometer/2121/image/image_41780.jpg",
#        "link": "http://equipment.lboro.ac.uk/id/item/2121/x-ray-photoelectron-spectrometer.html"

function kitcat_to_graph( $c )
{
	$content = file_get_contents( $c["url"] );
	$items = json_decode( $content, true );

	$graph = new Graphite();
	foreach( $items as $item )
	{
		$uri = "http://equipment.data.ac.uk/item/ukprn-".$c["ukprn"]."/".md5( $item["id"] );

		# assumption-- everything from kitcat is equipment		
		$graph->addCompressedTriple( $uri, "rdf:type", "oo:Equipment" );

		$graph->addCompressedTriple( $uri, "rdfs:label", $item["name"], "literal" );
		$graph->addCompressedTriple( $uri, "oo:formalOrganization", "http://id.learning-provider.data.ac.uk/ukprn/".$c["ukprn"] );

		if( $item["model"] != ""  || $item["manufacturer"] != "" )
		{
			$graph->addCompressedTriple( $uri, "gr:hasMakeAndModel", "$uri#model" );
			$graph->addCompressedTriple( "$uri#model", "rdf:type", "gr:ProductOrServiceModel" );
			if( $item["model"] != "" )
			{
				$graph->addCompressedTriple( "$uri#model", "rdfs:label", $item["model"], "literal" ); 
			}
			if( $item["manufacturer"] != "" )
			{
				$graph->addCompressedTriple( "$uri#model", "gr:hasManufacturer", "$uri#manu" );
				$graph->addCompressedTriple( "$uri#manu", "rdf:type", "gr:BusinessEntity" );
				$graph->addCompressedTriple( "$uri#manu", "rdfs:label", $item["manufacturer"], "literal" ); 
			}
		}

		if( $item["description"] != "" )
		{
			# kitcat always makes HTML fragment descriptions	
			$graph->addCompressedTriple( $uri, "dcterms:description", $item["description"], "http://purl.org/xtypes/Fragment-HTML" );
		}
		
		if( $item["contact1"] != "" )
		{	
			$graph->addCompressedTriple( $uri, "oo:contact", "$uri#contact1" );
			$graph->addCompressedTriple( $uri, "oo:primaryContact", "$uri#contact1" );
			$graph->addCompressedTriple( "$uri#contact1", "foaf:mbox", "mailto:".$item["contact1"] );
		}

		if( $item["contact2"] != "" )
		{	
			$graph->addCompressedTriple( $uri, "oo:contact", "$uri#contact2" );
			$graph->addCompressedTriple( "$uri#contact2", "foaf:mbox", "mailto:".$item["contact1"] );
		}

		if( $item["link"] != "" )
		{	
			$graph->addCompressedTriple( $uri, "foaf:page", $item["link"] );
		}

		if( $item["image"] != "" )
		{	
			$graph->addCompressedTriple( $uri, "foaf:depiction", $item["image"] );
		}
	}
	
	return $graph;
}

