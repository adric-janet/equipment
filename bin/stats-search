#!/usr/bin/php
<?php

# Crawls found opds looinkg for organiations and datasets

if(in_array('--dryrun',$argv)){
	$dryrun = true;
}else{
	$dryrun = false;	
}

if(in_array('--gz',$argv)){
	$gz = true;
}else{
	$gz = false;	
}

$cmd = $argv[1];
if(isset($argv[2]) && in_array($argv[2],array('master','slave','single'))){
	$role = $argv[2];
}else{
	$role = 'single';
}

$insertcount = 0;

require_once( "../etc/eq_config.php" );


require_once( "{$eq_config->pwd}/lib/arc2/ARC2.php" );
require_once( "{$eq_config->pwd}/lib/Graphite/Graphite.php" );

require_once( "{$eq_config->pwd}/dataacukEquipment.php" );

$eq = new dataacukEquipment($eq_config);

if($role == 'slave'){
	$eq->db = new eqDB($eq_config->masterdb->connection,$eq_config->masterdb->user,$eq_config->masterdb->password);
}else{
	$eq->launch_db();
	$eq->db->dryrun = $dryrun;
	
};


$regex = '/^(\S+) (\S+) (\S+) \[([^:]+):(\d+:\d+:\d+) ([^\]]+)\] \"(\S+) (.*?) (\S+)\" (\S+) (\S+) "([^"]*)" "([^"]*)"$/';


$mem = array();

$logfile = $argv[1];
$lastage = 0;
if($gz)
	$handle = @gzopen($logfile, "r");
else
	$handle = @fopen($logfile, "r");

if ($handle) {
    while (true) {
		
		if($gz)
			$buffer = gzgets($handle, 4096);
		else
			$buffer = fgets($handle, 4096);
			
		if($buffer === false) break;
			
		preg_match($regex ,$buffer, $matches);
		
		$thisline = false;
		
		if(!strpos($matches[12],"equipment.data.ac.uk")){
			continue;
		}
		
		if(strpos($matches[8],"search?term=")){
			$thisline = 'searchajax';
		}
		
		if(strpos($matches[8],"/?q=")===0){
			$thisline = 'search';
		}
		
		if($thisline === false){
			continue;
		}
		
		$time = $timestamp = DateTime::createFromFormat('!d/M/Y H:i:s O', "{$matches[4]} {$matches[5]} {$matches[6]}")->getTimestamp();
		
		parse_str(substr($matches[8], strpos($matches[8],"?")+1), $query);
		
		if($thisline=='search'){
			$query['term'] = $query['q'];
		}
		
		if(strlen($query['term']) == 0){
			continue;
		}


		if(isset($mem[$matches[1]])){
			$mem[$matches[1]]['his'][] = $query['term'];
			$mem[$matches[1]]['term'] = $query['term'];
			$mem[$matches[1]]['time'] = $time;
		}else
			$mem[$matches[1]] = array("term"=>$query['term'], "time"=>$time, "his"=>array($query['term']));

		$age = floor($time/60);
		if($age != $lastage){
			$ago = $time - 30;
			
			proc_mem($mem, $ago);
			
			$lastage = $age;
		}

    }
	
	proc_mem($mem, time());
	
	
	
    if (!feof($handle)) {
        echo "Error: unexpected fgets() fail\n";
    }
	
	if($gz)
		gzclose($handle);
	else
		fclose($handle);
}

echo "Added $insertcount terms\n";


$query = "SELECT * 
FROM (

SELECT COUNT( * ) AS  `Rows` ,  `search_ip` 
FROM  `statsSearchTerms` 
WHERE `search_owner` = ''
GROUP BY  `search_ip` 
ORDER BY  `search_ip`

) AS  `ips` 
LEFT OUTER JOIN  `statsIPOwner` ON  `search_ip` =  `ip_address` 
";

$count = 0;

$ips = $eq->db->exec($query, array());	
foreach($ips as $ip){
	$ups = array();
	if(!strlen($ip['ip_address'])){
		$ups['search_owner'] = whois($ip['search_ip']);
	}else{
		$ups['search_owner'] = $ip['ip_owner'];
	}
		

	$eq->db->update('statsSearchTerms',  $ups, array(), array('search_ip' => $ip['search_ip']));
	$eq->db->insert('statsIPOwner',  array('ip_address'=>$ip['search_ip'],'ip_owner'=>$ups['search_owner']), array('ip_date'=>'NOW()'));

	$count++;
	
}

echo "Added $count search institutions\n";

//print_r($mem);
exit();


function whois($query){
	$whois = `whois $query`;
	 preg_match ('/(OrgId\:)[\s]+([\w\s]+)\n/', $whois , $matches);
	 switch($matches[2]){
		 case "RIPE":
			preg_match ('/(org-name\:)[\s]+([\w\s]+)\n/', $whois , $matcheb);
			if(strlen($matcheb[2])){
				return $matcheb[2];
			}
			preg_match ('/(descr\:)[\s]+(.+)\n/', $whois , $matcheb);
			if(strlen($matcheb[2])){
				return $matcheb[2];
			}
		 break;
		 default:
			preg_match ('/(OrgName\:)[\s]+([\w\s]+)\n/', $whois , $matcheb);
			if(strlen($matcheb[2])){
				return $matcheb[2];
			}
			preg_match ('/(descr\:)[\s]+([\w\s]+)\n/', $whois , $matcheb);
			if(strlen($matcheb[2])){
				return $matcheb[2];
			}
		 break;
	 }
	 return "? $query";
	
}

function proc_mem(&$mem, $ago){
	
	
	foreach($mem as $ip=>$me){
		if($me['time'] < $ago){
			
			sort($me['his']);
			
			$lastqr = $me['his'][0];
			$lastqr_len = strlen($lastqr);
			
			foreach($me['his'] as $k=>$qr){
				$qr_len = strlen($qr);
			
					if($k!=0 && substr($me['his'][$k-1],0,min(strlen($me['his'][$k-1]),$qr_len)) != substr($qr,0,min(strlen($me['his'][$k-1]),$qr_len)) ){
						register_search($me['his'][$k-1], $ip, $me['time']);
					}
					
					if(substr($me['his'][$k+1],0,min(strlen($me['his'][$k+1]))) != substr($qr,0,min(strlen($me['his'][$k+1]))) ){
						register_search($qr, $ip, $me['time']);
					}
					
									
				$lastqr = $qr;
				$lastqr_len = $qr_len;
			}
			
			register_search($qr, $ip, $me['time']);
		
			unset($mem[$ip]);
		}
	}
	
}

function register_search($term, $ip, $time){
	
	global $eq,$insertcount;
	
	$ins['search_key'] = date(DATE_ATOM, $time).":".$ip.":".md5($term);
	$ins['search_ip'] = $ip;
	$ins['search_date'] =  date("Y-m-d H:i:s", $time);
	$ins['search_term'] = $term;
	
	$res = $eq->db->fetch_one('statsSearchTerms', array('search_key' => $ins['search_key']), array(), "`search_key`");

	if(!isset($res['search_key'])){	
		$eq->db->insert('statsSearchTerms',$ins, array(),"INSERT");
		$insertcount ++;
	}
	
}


?>